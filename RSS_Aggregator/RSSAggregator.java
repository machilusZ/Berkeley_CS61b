import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * This program inputs an XML RSS (version 2.0) feed from a given URL and
 * outputs various elements of the feed to the console.
 *
 * @author Yunan Zhang
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() != 0) {
            if (!(channel.child(getChildElement(channel, "title")).child(0)
                    .label().equals(""))) {
                out.println(channel.child(getChildElement(channel, "title"))
                        .child(0).label());
            } else {
                out.println("Empty Title");
            }
        } else {
            out.println("Empty Title");
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1>");
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() != 0) {
            if (!(channel.child(getChildElement(channel, "title")).child(0)
                    .label().equals(""))) {
                out.println("<a href = \""
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "\">"
                        + channel.child(getChildElement(channel, "title"))
                                .child(0).label()
                        + "</a>");
            } else {
                out.println("<a href = \""
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "\">" + "Empty title" + "</a>");
            }
        } else {
            out.println(
                    "<a href = \""
                            + channel.child(getChildElement(channel, "link"))
                                    .child(0).label()
                            + "\">" + "Empty title" + "</a>");
        }
        out.println("</h1>");
        out.println("<p>");
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() != 0
                && !(channel.child(getChildElement(channel, "description"))
                        .label().equals("description"))) {

            if (!(channel.child(getChildElement(channel, "description"))
                    .child(0).label().equals(""))) {
                out.println(
                        channel.child(getChildElement(channel, "description"))
                                .child(0).label());
            } else {
                out.println("No description");
            }
        } else {
            out.println("No description");
        }
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>");
        out.println("<b> Date </b>");
        out.println("</th>");
        out.println("<th>");
        out.println("<b> Source </b>");
        out.println("</th>");
        out.println("<th>");
        out.println("<b> News </b>");
        out.println("</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of the {@code XMLTree} matching the
     *         given tag or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of the {@code XMLTree} matching the
     *   given tag or -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int result = -1, counter1 = 0;
        boolean condition = true;

        while (condition && counter1 < xml.numberOfChildren()) {
            if (tag.equals(xml.child(counter1).label())) {
                result = counter1;
                condition = false;
            }
            counter1++;
        }
        return result;
    }

    /**
     * Processes one news item and outputs the title, or the description if the
     * title is not present, and the link (if available) with appropriate
     * labels.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures out.content = #out.content * [the title (or description) and
     *          link]
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");
        if (getChildElement(item, "pubDate") != -1) {
            out.println("<td>" + item.child(getChildElement(item, "pubDate"))
                    .child(0).label() + "</td>");
        } else {
            out.println("<td>" + "No date available" + "</td>");
        }
        if (getChildElement(item, "source") != -1) {
            if (item.child(getChildElement(item, "source"))
                    .numberOfChildren() != 0) {
                out.println("<td>" + "<a href = \""
                        + item.child(getChildElement(item, "source"))
                                .attributeValue("url")
                        + "\">" + item.child(getChildElement(item, "source"))
                                .child(0).label()
                        + "</a>" + "</td>");
            } else {
                out.println("<td>" + "No source available" + "</td>");
            }
        } else {
            out.println("<td>" + "No source available" + "</td>");
        }
        if (getChildElement(item, "title") != -1) {
            if (item.child(getChildElement(item, "title"))
                    .numberOfChildren() != 0) {
                if (!(item.child(getChildElement(item, "title")).label()
                        .equals(""))) {
                    out.println(
                            "<td>" + "<a href = \""
                                    + item.child(getChildElement(item, "link"))
                                            .child(0).label()
                                    + "\">"
                                    + item.child(getChildElement(item, "title"))
                                            .child(0).label()
                                    + "</a>" + "</td>");
                } else {
                    out.println("<td>" + "<a href = \""
                            + item.child(getChildElement(item, "link")).child(0)
                                    .label()
                            + "\">"
                            + item.child(getChildElement(item, "description"))
                                    .child(0).label()
                            + "</a>" + "</td>");
                }
            }
        } else {
            out.println("<td>" + "<a href = \""
                    + item.child(getChildElement(item, "link")).child(0).label()
                    + "\">" + item.child(getChildElement(item, "description"))
                            .child(0).label()
                    + "</a>" + "</td>");
        }
        out.println("</tr>");

    }

    /**
     * Arranges the whole news and creats a new page.
     *
     * @param url
     *            The url for the rss website
     * @param out
     *            The output stream
     * @param name
     *            The name for the html page
     * @requires The out is open and xml is a news feed page
     *
     * @ensures The news feed will be divided to seperate pages
     */
    public static void processFeed(String url, String name, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        SimpleWriter fileOutput = new SimpleWriter1L(name);
        if (xml.label().equals("rss")
                && xml.attributeValue("version").equals("2.0")) {
            XMLTree channel = xml.child(0);
            outputHeader(channel, fileOutput);
            for (int counter1 = 0; counter1 < channel
                    .numberOfChildren(); counter1++) {
                if (channel.child(counter1).label().equals("item")) {
                    processItem(channel.child(counter1), fileOutput);
                }
            }
            outputFooter(fileOutput);
        } else {
            out.println("the website you entered is not a valid 2.0 RSS site");

        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL for the news feed: ");
        String url = in.nextLine();
        out.print(
                "Enter the name of the output file without the html extension: ");
        String name = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        SimpleWriter fileOutput = new SimpleWriter1L(name + ".html");
        fileOutput.println("<html> <head> <title>" + xml.attributeValue("title")
                + "</title> </head> <body>" + "<h2>"
                + xml.attributeValue("title") + "</h2> <ul>");

        for (int counter1 = 0; counter1 < xml.numberOfChildren(); counter1++) {

            processFeed(xml.child(counter1).attributeValue("url"),
                    xml.child(counter1).attributeValue("file"), out);

            fileOutput.println("<li> <a href = \""
                    + xml.child(counter1).attributeValue("file") + "\" >"
                    + xml.child(counter1).attributeValue("name")
                    + "</a> </li>");
        }
        fileOutput.println("</ul> </body> </html>");
        in.close();
        out.close();
        fileOutput.close();

    }
}

